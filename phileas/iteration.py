"""
This modules contains the trees used for data iteration.

The `DataTree` stores an actual data point, which consists of nested `dict` and
`list` objects, with `DataLiteral` leaves.

Then, the `IterationTree` provides a framework to build complex searches over
data trees. Its leaves consist of literal values, or data iterators. Those
leaves can simply be iterated over using `IterationTree.iterate`, but they can
also be used to build more complex iteration trees.

First, they can be combined with `IterationMethod` nodes, which provide a way to
iterate over multiple data sources. Then, `Transform` nodes can be inserted in
those trees in order to modify the data trees generated while iterating.
"""

from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Generic, Iterable, TypeVar

#: Data values that can be used
DataLiteral = None | bool | str | int | float

#: Dictionary keys
Key = DataLiteral

#: A data tree consists of literal leaves, and dictionary or list nodes
DataTree = DataLiteral | dict[Key, "DataTree"] | list["DataTree"]


class IterationTree(ABC):
    """
    Represents a set of data trees, as well as the way to iterate over them.
    """

    @abstractmethod
    def iterate(self) -> Iterable[DataTree]:
        """
        Yields all the data trees represented by the iteration tree.
        """
        raise NotImplementedError()


### Nodes ###


@dataclass(frozen=True)
class IterationMethod(IterationTree):
    """
    Node which knows how to iterate through a `list` or `dict` of iteration
    trees.

    In order to implement a concrete iteration method, you should sub-class
    `IterationMethod` and implement the `iterate` method.

    This should remain the only node in an iteration tree that can hold `dict`
    and `list`. If you are tempted to create another node doing so, you should
    verify that it cannot be done by sub-classing `IterationMethod` instead.
    """

    children: IterationTree | list[IterationTree] | dict[DataLiteral, IterationTree]


@dataclass(frozen=True)
class Transform(IterationTree):
    """
    Node that modifies the data trees generated by its child during iteration.

    If you want to transform a `list` or `dict` of iteration trees, you should
    wrap them in an `IterationMethod` object first.
    """

    child: IterationTree

    @abstractmethod
    def transform(self, data_tree: DataTree) -> DataTree:
        """
        Method implemented by concrete sub-classes to modify the data tree
        generated by the `child` tree.
        """
        raise NotImplementedError()

    def iterate(self) -> Iterable[DataTree]:
        for data_child in self.child.iterate():
            yield self.transform(data_child)


### Leaves ###


@dataclass(frozen=True)
class IterationLiteral(IterationTree):
    """
    Wrapper around a `DataLiteral`.
    """

    value: DataLiteral

    def iterate(self) -> Iterable[DataLiteral]:
        yield self.value


T = TypeVar("T", bound=int | float)


@dataclass(frozen=True)
class NumericRange(IterationTree, Generic[T]):
    """
    Represents a range of numeric values.
    """

    start: T
    end: T

    @abstractmethod
    def iterate(self) -> Iterable[DataLiteral]:
        raise NotImplementedError()


@dataclass(frozen=True)
class Sequence(IterationTree):
    """
    Sequence of data trees.
    """

    elements: list[DataTree]

    @abstractmethod
    def iterate(self) -> Iterable[DataTree]:
        return self.elements
